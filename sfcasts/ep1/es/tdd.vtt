WEBVTT

00:00:01.296 --> 00:00:01.896 align:middle
Muy bien.

00:00:02.336 --> 00:00:07.216 align:middle
Así que uno de los problemas es que cuando
Bob, nuestro guardabosques, ve el tamaño de

00:00:07.816 --> 00:00:10.116 align:middle
los dinosaurios... no
puede recordar si están en

00:00:10.246 --> 00:00:11.676 align:middle
metros... o

00:00:12.196 --> 00:00:15.556 align:middle
en centímetros... lo que supone una
gran diferencia cuando se entra en

00:00:16.446 --> 00:00:20.366 align:middle
una jaula. Una forma mejor sería utilizar
simplemente palabras como pequeño, mediano o grande.

00:00:20.466 --> 00:00:22.286 align:middle
Así que... ¡hagamos eso!

00:00:23.146 --> 00:00:25.536 align:middle
Para añadir esta
característica, vamos a utilizar

00:00:25.536 --> 00:00:28.956 align:middle
una filosofía llamada Desarrollo
Dirigido por Pruebas o TDD. TDD

00:00:29.786 --> 00:00:36.576 align:middle
es básicamente una palabra de moda que
describe un proceso de 4 pasos para escribir

00:00:37.436 --> 00:00:40.246 align:middle
tus pruebas primero. Paso 1: Escribe una prueba

00:00:40.726 --> 00:00:44.196 align:middle
para la función. Paso 2: Ejecuta tu prueba y

00:00:44.676 --> 00:00:47.326 align:middle
observa cómo falla... ¡ya que aún no

00:00:48.206 --> 00:00:52.596 align:middle
hemos creado esa función! Paso 3: Escribe el
menor código posible para que nuestra prueba

00:00:53.146 --> 00:01:00.146 align:middle
pase. Y Paso 4: Ahora que pasa, refactoriza tu código
si es necesario para hacerlo más impresionante

00:01:00.626 --> 00:01:03.046 align:middle
Así que, para obtener el
texto Pequeño, Mediano

00:01:03.666 --> 00:01:08.316 align:middle
o Grande, creo que deberíamos añadir un nuevo
métodogetSizeDescription() a nuestra clase Dinosaur.

00:01:08.686 --> 00:01:12.836 align:middle
Pero, recuerda, vamos a
hacer esto a la manera de

00:01:12.836 --> 00:01:16.426 align:middle
TDD, donde el paso 1 es
escribir una prueba para ese

00:01:16.926 --> 00:01:18.636 align:middle
método... aunque todavía no exista. Sí,

00:01:19.276 --> 00:01:21.336 align:middle
ya sé que es raro...

00:01:21.896 --> 00:01:23.586 align:middle
¡pero es un poco

00:01:24.276 --> 00:01:28.746 align:middle
genial! Añade public function y
probemos primero que un dinosaurio de

00:01:28.746 --> 00:01:31.436 align:middle
más de 10 metros es grande. Dentro,

00:01:32.446 --> 00:01:39.766 align:middle
di $dino = new Dinosaur(), dale un
nombre, vamos a utilizar de nuevo a Big

00:01:39.976 --> 00:01:43.966 align:middle
Eaty, ya que es un tipo
genial, y establece su longitud

00:01:45.176 --> 00:01:51.606 align:middle
en 10. Entonces, assertSame()
que Large será idéntico a

00:01:52.546 --> 00:01:57.586 align:middle
$dino->getSizeDescription(). Para nuestro mensaje
de fallo, utilizamos This is supposed to be a Large

00:01:58.186 --> 00:02:02.966 align:middle
Dinosaur . Sí, estamos probando
literalmente un método que aún no

00:02:03.646 --> 00:02:04.856 align:middle
existe. Eso

00:02:05.716 --> 00:02:08.306 align:middle
es TDD. Bien, el paso

00:02:08.846 --> 00:02:12.976 align:middle
1 está hecho. El paso 2 es
ejecutar nuestra prueba y comprobar

00:02:14.126 --> 00:02:15.816 align:middle
que falla. Abre un terminal y
ejecuta ./vendor/bin/phpunit.

00:02:16.016 --> 00:02:17.336 align:middle
./vendor/bin/phpunit

00:02:17.336 --> 00:02:18.836 align:middle
Y... ¡genial!

00:02:18.836 --> 00:02:23.116 align:middle
2 pruebas, 4 aserciones y 1 error. Nuestra

00:02:23.466 --> 00:02:28.446 align:middle
nueva prueba ha fallado porque, por
supuesto, ¡hemos llamado a un método

00:02:29.456 --> 00:02:32.236 align:middle
indefinido! Ya sabíamos que
esto pasaría. Hm... ¿Te

00:02:32.406 --> 00:02:36.076 align:middle
has dado cuenta de que
nuestro mensaje "se supone que

00:02:36.076 --> 00:02:38.716 align:middle
esto es un gran dinosaurio" no aparece aquí?

00:02:39.406 --> 00:02:41.316 align:middle
Te explicaré por qué en un momento.

00:02:42.346 --> 00:02:47.956 align:middle
Es hora del paso 3 de TDD: escribir
código sencillo para hacer que esta

00:02:48.626 --> 00:02:52.196 align:middle
prueba pase. Esta parte, tomada al pie de

00:02:53.026 --> 00:02:58.996 align:middle
la letra, puede ser un poco divertida.
Observa: en nuestra clase Dinosaur

00:02:59.506 --> 00:03:01.256 align:middle
añade un nuevo public function

00:03:02.676 --> 00:03:05.516 align:middle
getSizeDescription() que devolverá un

00:03:06.166 --> 00:03:08.076 align:middle
string . Dentro... return

00:03:09.096 --> 00:03:12.046 align:middle
'Large'. Sí, ¡ya está!
Vuelve a tu terminal y

00:03:13.036 --> 00:03:15.876 align:middle
vuelve a ejecutar las pruebas.

00:03:16.246 --> 00:03:22.156 align:middle
Y... Impresionante: ¡pasan! Bueno... por supuesto
que la prueba ha pasado: ¡hemos codificado el

00:03:22.846 --> 00:03:28.006 align:middle
resultado que queríamos! Pero,
técnicamente, eso es lo que dice

00:03:28.006 --> 00:03:30.816 align:middle
TDD: escribe la menor cantidad
de código posible para

00:03:31.376 --> 00:03:36.196 align:middle
que tu prueba pase. Si tu método es demasiado
simple después de hacer esto, significa que

00:03:36.396 --> 00:03:41.556 align:middle
te faltan más pruebas -como para dinosaurios
pequeños o medianos- que te obligarían a mejorar

00:03:42.316 --> 00:03:43.926 align:middle
el método. Lo veremos en un

00:03:44.526 --> 00:03:47.116 align:middle
momento. Pero somos un poco más realistas.

00:03:47.116 --> 00:03:56.516 align:middle
Digamos:if ($this->length >=
10) {, luego return 'Large'. Ejecuta

00:03:57.376 --> 00:04:02.526 align:middle
las pruebas una vez más para asegurarte
de que siguen pasando: Y... ¡sí!

00:04:02.696 --> 00:04:05.836 align:middle
¡Seguimos siendo aptos! A continuación, vamos

00:04:06.816 --> 00:04:09.786 align:middle
a terminar este método a la manera

00:04:10.086 --> 00:04:13.476 align:middle
de TDD: escribiendo primero más
pruebas para las características

00:04:13.876 --> 00:04:19.746 align:middle
que faltan. Luego pasaremos al último
paso -y el más divertido- de TDD: ¡la
