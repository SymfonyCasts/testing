WEBVTT

00:00:01.096 --> 00:00:05.586 align:middle
Echemos un vistazo rápido a GithubService
para ver qué hace exactamente.

00:00:05.666 --> 00:00:10.956 align:middle
En primer lugar, el constructor
requiere un objeto HttpClientInterface

00:00:10.996 --> 00:00:12.796 align:middle
que utilizamos para llamar a GitHub. A

00:00:13.296 --> 00:00:18.016 align:middle
cambio, obtenemos un ResponseInterface
que contiene una matriz

00:00:18.016 --> 00:00:20.206 align:middle
de incidencias del repositorio dino-park.

00:00:20.956 --> 00:00:26.736 align:middle
A continuación, llamamos al método toArray() en la
respuesta, e iteramos sobre cada incidencia para ver

00:00:26.736 --> 00:00:31.146 align:middle
si el título contiene el $dinosaurName, de
modo que podamos obtener su etiqueta de estado.

00:00:32.576 --> 00:00:37.706 align:middle
Para que nuestras pruebas pasen, tenemos
que enseñar a nuestro falso httpClient

00:00:37.846 --> 00:00:40.236 align:middle
que cuando llamemos al método request(),

00:00:40.596 --> 00:00:45.996 align:middle
debe devolver un objeto ResponseInterface
que contenga datos que nosotros controlamos.

00:00:46.826 --> 00:00:48.996 align:middle
Así que... hagámoslo.

00:00:48.996 --> 00:00:57.596 align:middle
Justo después de $mockHttpClient, di
$mockResponse = $this->createMock() utilizando

00:00:57.596 --> 00:01:00.736 align:middle
ResponseInterface::class para
el nombre de la clase. Abajo

00:01:02.146 --> 00:01:05.576 align:middle
en $mockHttpClient, llama,

00:01:06.066 --> 00:01:10.616 align:middle
->method('request') que
willReturn($mockResponse).

00:01:12.346 --> 00:01:17.336 align:middle
Esto le dice a nuestro cliente simulado que, oye, cada vez
que llamemos al método request() en nuestro simulado, tienes

00:01:17.736 --> 00:01:20.786 align:middle
que devolver este $mockResponse.

00:01:21.456 --> 00:01:25.146 align:middle
Ahora podríamos ejecutar
nuestras pruebas, pero fallarían.

00:01:25.686 --> 00:01:30.046 align:middle
Hemos enseñado a nuestro cliente simulado lo que
debe devolver cuando llamemos al método request().

00:01:30.456 --> 00:01:35.416 align:middle
Pero ahora tenemos que enseñar a nuestro $mockResponse
lo que debe hacer cuando llamemos al método

00:01:35.416 --> 00:01:37.256 align:middle
toArray().

00:01:37.356 --> 00:01:43.046 align:middle
Así que justo encima, vamos a enseñarle al
$mockResponse que cuando llamemos, method('toArray')

00:01:43.806 --> 00:01:46.556 align:middle
y él willReturn() un array de incidencias.

00:01:47.086 --> 00:01:49.996 align:middle
Porque eso es lo que devuelve
GitHub cuando llamamos a la API.

00:01:50.476 --> 00:01:54.716 align:middle
Para cada incidencia, GitHub nos
da el "título" de la incidencia

00:01:54.836 --> 00:01:57.536 align:middle
y, entre otras cosas, una
matriz de "etiquetas".

00:01:58.176 --> 00:02:03.976 align:middle
Así que imitemos a GitHub y hagamos que esta matriz
incluya una incidencia que tenga 'title' => 'Daisy'.

00:02:04.586 --> 00:02:10.616 align:middle
Y, para la prueba, haremos como si se hubiera torcido el tobillo,
así que añadiremos un conjunto de claves labels a un array,

00:02:10.746 --> 00:02:13.546 align:middle
que incluya 'name' =>
'Status: Sick'. Vamos a

00:02:14.556 --> 00:02:17.486 align:middle
crear también un dino sano para poder afirmar

00:02:17.486 --> 00:02:20.336 align:middle
que nuestro análisis sintáctico
también lo comprueba correctamente.

00:02:20.936 --> 00:02:22.716 align:middle
Copia esta edición y pégala a continuación.

00:02:23.546 --> 00:02:27.846 align:middle
Cambia Daisy por Maverick y pon
su etiqueta en Status: Healthy.

00:02:29.306 --> 00:02:35.926 align:middle
¡Perfecto! Nuestras afirmaciones ya esperan
que Daisy esté enfermo y Maverick sano.

00:02:36.696 --> 00:02:42.846 align:middle
Así que, si nuestras pruebas pasan, significa que toda
nuestra lógica de análisis de etiquetas es correcta.

00:02:42.936 --> 00:02:45.676 align:middle
Crucemos los dedos y
probemos: ./vendor/bin/phpunit

00:02:46.256 --> 00:02:49.656 align:middle
Y... ¡Genial!

00:02:49.856 --> 00:02:52.946 align:middle
¡Pasan! Y

00:02:53.386 --> 00:02:59.476 align:middle
lo mejor de todo, ¡ya no estamos llamando a la API de
GitHub cuando ejecutamos nuestras pruebas! Imagínate

00:02:59.526 --> 00:03:03.246 align:middle
el pánico que causaríamos si tuviéramos
que bloquear el parque porque nuestras pruebas

00:03:03.496 --> 00:03:07.126 align:middle
fallan porque la api está desconectada... o

00:03:07.616 --> 00:03:13.386 align:middle
simplemente porque alguien ha cambiado
las etiquetas en GitHub, Ya... Yo

00:03:13.526 --> 00:03:15.346 align:middle
tampoco quiero ese dolor
de cabeza... ¿Recuerdas

00:03:16.456 --> 00:03:19.526 align:middle
cuando hablábamos de los diferentes
nombres de los mocks? Pues bien,

00:03:20.026 --> 00:03:26.136 align:middle
tanto mockResponse como mockHttpClient
se llaman ahora oficialmente stubs ... Es

00:03:26.726 --> 00:03:29.626 align:middle
una forma elegante de decir
objetos falsos en los que

00:03:29.626 --> 00:03:33.566 align:middle
, opcionalmente, tomamos el control
de los valores que devuelven. Eso es

00:03:34.196 --> 00:03:37.696 align:middle
exactamente lo que estamos haciendo
con el método willReturn(). De nuevo,

00:03:38.456 --> 00:03:43.276 align:middle
la terminología no es demasiado
importante, pero ahí la tienes. Esto

00:03:43.516 --> 00:03:44.476 align:middle
son stubs. Y

00:03:44.476 --> 00:03:48.496 align:middle
sí, cada vez que enseño esto,
tengo que buscar estos términos para

00:03:48.496 --> 00:03:50.856 align:middle
recordar qué significan exactamente. A

00:03:51.716 --> 00:03:56.606 align:middle
continuación, vamos a convertir nuestros
stubs en auténticos objetos simulados,

00:03:56.646 --> 00:04:00.436 align:middle
probando también los datos
pasados al objeto simulado
